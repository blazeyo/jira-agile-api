{"version":3,"sources":["../../src/util/getSprintHistory.js"],"names":["debug","initialStatus","log","console","message","getValue","issue","field","fields","getNormalizedDate","date","normalized","Date","now","setHours","setMinutes","setSeconds","getStatusOn","day","sprint","created","histories","changelog","status","h","change","i","items","item","toString","formatDate","getFullYear","getMonth","getDate","map","join","getSprintHistoryFromIssues","issues","estimationField","stats","today","sprintStartDate","startDate","setDate","length","dateString","estimation","key","result","hasOwnProperty","push","getAllIssues","boardId","sprintId","results","getPageOfIssues","getSprintIssues","expand","startAt","then","total","page","concat","getSprintHistory","Promise","all","getSingle","response","getEstimation","fieldId","getSprintWithHistory","history"],"mappings":"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","file":"getSprintHistory.js","sourcesContent":["/*\n * foreach issues as issue\n *   estimation = getEstimation(issue)\n *   foreach days as day\n *     status = computeStatusOn(issue, day)\n *     stats[day][status] += estimation\n */\n\nimport {\n  board as boardEndpoint,\n  sprint as sprintEndpoint,\n  issue as issueEndpoint\n} from '../index';\n\nconst debug = false;\n\nconst initialStatus = 'To Do';\n\n/**\n * Print message when in debug mode.\n *\n * @param message\n */\nconst log = message => {\n  if (debug) {\n    console.log(message);\n  }\n};\n\n/**\n * Returns value of given field in given issue.\n *\n * @param {object} issue\n * @param {string} field\n */\nconst getValue = (issue, field) => issue.fields[field];\n\n/**\n * Normalizes date objects by settings their time to 23:59:59.\n *\n * @param {Date | String} date\n * @returns {Date}\n */\nconst getNormalizedDate = (date) => {\n  const normalized = new Date(date || Date.now());\n  normalized.setHours(23);\n  normalized.setMinutes(59);\n  normalized.setSeconds(59);\n  return normalized;\n};\n\n/**\n * Returns the status that the issue was in at the end of the given day.\n *\n * @param {Object} issue\n * @param {Date} day\n * @param {Object} sprint\n * @returns {String}\n */\nconst getStatusOn = (issue, day, sprint) => {\n  const { fields: { created },  changelog: { histories } } = issue;\n  // Start with current status and iterate over history\n  // in reverse order until passing the given day.\n  let status = initialStatus;\n\n  // TODO Monitor the sprint that the issue is associated with\n  //      and return null if it wasn't in that sprint at given day.\n\n  // If the issue had been created after the given day return null.\n  if (getNormalizedDate(created) > day) {\n    log(`- N/A (issue created on ${created})`)\n    return null;\n  }\n\n  for (let h in histories) {\n    const change = histories[h];\n    const date = getNormalizedDate(change.created);\n\n    for (let i in change.items) {\n      const item = change.items[i];\n      if (item.field === 'status') {\n        status = item.toString;\n      }\n    }\n\n    if (date === day) {\n      break;\n    }\n  }\n\n  log(`- ${status}`);\n\n  return status;\n};\n\n/**\n * Formats date as yyyy-mm-dd.\n *\n * @param {Date} date\n * @returns {String}\n */\nconst formatDate = date => [date.getFullYear(), date.getMonth(), date.getDate()]\n  .map(item => item.toString())\n  .join('-');\n\n/**\n * Builds historical statistics from given set of issues.\n *\n * @param {Array<Object>} issues\n * @param {Object} sprint\n * @param {String} estimationField\n * @returns {{}}\n */\nconst getSprintHistoryFromIssues = (issues, sprint, estimationField) => {\n  const stats = {};\n\n  const today = getNormalizedDate();\n  const sprintStartDate = getNormalizedDate(sprint.startDate);\n  sprintStartDate.setDate(sprintStartDate.getDate() - 1);\n\n  log(`Found ${issues.length} issues. Fetching history since ${sprintStartDate}.`);\n\n  // TODO Move the code to a separate module in jira-agile-api.\n\n  issues.map(issue => {\n    let dateString, status;\n    const estimation = getValue(issue, estimationField);\n    const day = new Date(today);\n\n    log(`Processing issue ${issue.key}. Estimation: ${estimation}.`);\n\n    while (day >= sprintStartDate) {\n      log(`Status on ${day}:`);\n\n      // Lack of status means that the issue didn't exist yet\n      // at given day or was not in the sprint at that point.\n      if (status = getStatusOn(issue, day, sprint)) {\n        // Get date in yyyy-mm-dd format.\n        dateString = formatDate(day);\n\n        // Make sure date and status stats are initialized.\n        stats[dateString] = stats[dateString] || {};\n        stats[dateString][status] = stats[dateString][status] || 0;\n\n        stats[dateString][status] += estimation;\n      }\n\n      // Go one day back.\n      day.setDate(day.getDate() - 1)\n    }\n  });\n\n  // Turn the object into an array for easier iteration.\n  const result = [];\n  for (let key in stats) {\n    if (stats.hasOwnProperty(key)) {\n      result.push({\n        date: key,\n        stats: stats[key]\n      });\n    }\n  }\n\n  return result;\n};\n\n/**\n * Returns a promise to fetch all the issues in given sprint.\n *\n * @param {String} boardId\n * @param {String} sprintId\n * @returns {Promise}\n */\nconst getAllIssues = (boardId, sprintId) => {\n  let results = [];\n\n  const getPageOfIssues = () => {\n    return boardEndpoint.getSprintIssues(\n      boardId,\n      sprintId,\n      {\n        expand: 'changelog',\n        startAt: results.length,\n        // maxResults: 50, // This is the default.\n      }\n    ).then(page => {\n      const { total, issues } = page;\n\n      results = results.concat(issues);\n      log(`Received page ${issues.length} issues of ${total} total. Results so far: ${results.length}.`);\n\n      // We have received all results. Note: the total may have changed since we\n      // requested the first page of results.\n      if (results.length >= total) {\n        return results;\n      }\n\n      // Get another page of issues.\n      return getPageOfIssues();\n    });\n  };\n\n  return getPageOfIssues();\n};\n\n/**\n * Returns a promise to fetch historical statistics for given sprint.\n *\n * @param {String} boardId\n * @param {String} sprintId\n * @returns {Promise}\n *\n * @deprecated Use getSprintWithHistory instead.\n */\nexport const getSprintHistory = (boardId, sprintId) => {\n  let sprint, issues;\n\n  return Promise.all([\n    sprintEndpoint.getSingle(sprintId).then(response => {\n      sprint = response;\n    }),\n    getAllIssues(boardId, sprintId).then(response => {\n      issues = response;\n    })\n  ]).then(\n    () => issueEndpoint.getEstimation(issues[0].key, { boardId: boardId })\n  ).then(\n    ({ fieldId }) => getSprintHistoryFromIssues(issues, sprint, fieldId)\n  );\n};\n\n/**\n * Returns a promise to fetch historical statistics for given sprint.\n *\n * @param {String} boardId\n * @param {String} sprintId\n * @returns {Promise}\n */\nexport const getSprintWithHistory = (boardId, sprintId) => {\n  let sprint, issues;\n\n  // Retrieve sprint info and sprint issues in parallel.\n  return Promise.all([\n    sprintEndpoint.getSingle(sprintId).then(response => {\n      sprint = response;\n    }),\n    getAllIssues(boardId, sprintId).then(response => {\n      issues = response;\n    })\n  ]).then(\n    () => issueEndpoint.getEstimation(issues[0].key, { boardId: boardId })\n  ).then(({ fieldId }) => {\n    return {\n      history: getSprintHistoryFromIssues(issues, sprint, fieldId),\n      sprint,\n      issues\n    };\n  });\n};\n"]}