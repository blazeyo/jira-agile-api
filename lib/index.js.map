{"version":3,"sources":["../src/index.js"],"names":["endpointUrl","prefix","defaultSettings","mode","cache","esc","encodeURIComponent","encodeGetQuery","Object","keys","params","map","k","join","url","uri","query","sendRequest","settings","fetch","then","response","json","api","setSetting","key","value","setEndpoint","sendGetRequest","resourceUri","method","sendRequestWithPayload","payload","httpMethod","body","JSON","stringify","sendDeleteRequest","backlog","moveIssuesToBacklog","issues","board","getList","getSingle","boardId","getIssues","getBacklog","getConfiguration","getSprints","getSprintIssues","sprintId","create","name","type","filterId","otherValues","delete","issue","issueIdOrKey","getEstimation","setEstimation","sprint","originBoardId","update","newValue","partialUpdate","fieldsToUpdate","moveIssuesToSprint","swapWith","secondSprintId","sprintToSwapWith","getPropertiesKeys","deleteProperty","propertyKey","setProperty","getProperty","util","getSprintHistory","getSprintWithHistory"],"mappings":";;;;;;;;;AAAA;;AAEA,IAAIA,cAAc,uBAAlB;AACA,IAAMC,SAAS,gBAAf;;AAEA,IAAMC,kBAAkB;AACtBC,QAAM,MADgB;AAEtBC,SAAO;AAFe,CAAxB;;AAKA,IAAMC,MAAMC,kBAAZ;;AAEA,IAAMC,iBAAiB,SAAjBA,cAAiB;AAAA,SACrBC,OAAOC,IAAP,CAAYC,MAAZ,EACGC,GADH,CACO;AAAA,WAAQN,IAAIO,CAAJ,CAAR,SAAkBP,IAAIK,OAAOE,CAAP,CAAJ,CAAlB;AAAA,GADP,EAEGC,IAFH,CAEQ,GAFR,CADqB;AAAA,CAAvB;;AAKA,IAAMC,MAAM,SAANA,GAAM,CAACC,GAAD,EAAMC,KAAN;AAAA,SACPhB,WADO,SACQC,MADR,SACkBc,GADlB,SACyBR,eAAeS,KAAf,CADzB;AAAA,CAAZ;;AAGA,IAAMC,cAAc,SAAdA,WAAc,CAACF,GAAD,EAAMG,QAAN;AAAA,MAAgBF,KAAhB,uEAAwB,EAAxB;AAAA,SAClBG,MAAML,IAAIC,GAAJ,EAASC,KAAT,CAAN,eAA4Bd,eAA5B,EAAgDgB,QAAhD,GACGE,IADH,CACQ;AAAA,WAAYC,SAASC,IAAT,EAAZ;AAAA,GADR,CADkB;AAAA,CAApB;;AAIA,IAAMC,MAAM,EAAZ;;AAEAA,IAAIC,UAAJ,GAAiB,UAACC,GAAD,EAAMC,KAAN;AAAA,SACfxB,gBAAgBuB,GAAhB,IAAuBC,KADR;AAAA,CAAjB;;AAGAH,IAAII,WAAJ,GAAkB,UAACb,GAAD;AAAA,SAChBd,cAAcc,GADE;AAAA,CAAlB;;AAGAS,IAAIK,cAAJ,GAAqB,UAACC,WAAD;AAAA,MAAcb,KAAd,uEAAsB,EAAtB;AAAA,SACnBC,YAAYY,WAAZ,EAAyB,EAAEC,QAAQ,KAAV,EAAzB,EAA4Cd,KAA5C,CADmB;AAAA,CAArB;;AAGAO,IAAIQ,sBAAJ,GAA6B,UAACF,WAAD,EAAcG,OAAd;AAAA,MAAuBC,UAAvB,uEAAoC,MAApC;AAAA,MAA4CjB,KAA5C,uEAAoD,EAApD;AAAA,SAC3BC,YAAYY,WAAZ,EAAyB,EAAEC,QAAQG,UAAV,EAAsBC,MAAMC,KAAKC,SAAL,CAAeJ,OAAf,CAA5B,EAAzB,EAAgFhB,KAAhF,CAD2B;AAAA,CAA7B;;AAGAO,IAAIc,iBAAJ,GAAwB,UAACR,WAAD;AAAA,SACtBZ,YAAYY,WAAZ,EAAyB,EAAEC,QAAQ,QAAV,EAAzB,CADsB;AAAA,CAAxB;;AAGAP,IAAIe,OAAJ,GAAc,EAAd;;AAEA;;;;AAIAf,IAAIe,OAAJ,CAAYC,mBAAZ,GAAkC;AAAA,SAChCR,uBAAuB,eAAvB,EAAwC,EAACS,QAAQA,MAAT,EAAxC,CADgC;AAAA,CAAlC;;AAGAjB,IAAIkB,KAAJ,GAAY,EAAZ;;AAEAlB,IAAIkB,KAAJ,CAAUC,OAAV,GAAoB,UAAChC,MAAD;AAAA,SAClBkB,eAAe,OAAf,EAAwBlB,MAAxB,CADkB;AAAA,CAApB;;AAGAa,IAAIkB,KAAJ,CAAUE,SAAV,GAAsB,UAACC,OAAD,EAAUlC,MAAV;AAAA,SACpBkB,0BAAwBgB,OAAxB,EAAmClC,MAAnC,CADoB;AAAA,CAAtB;;AAGAa,IAAIkB,KAAJ,CAAUI,SAAV,GAAsB,UAACD,OAAD,EAAUlC,MAAV;AAAA,SACpBkB,0BAAwBgB,OAAxB,cAA0ClC,MAA1C,CADoB;AAAA,CAAtB;;AAGAa,IAAIkB,KAAJ,CAAUK,UAAV,GAAuB,UAACF,OAAD,EAAUlC,MAAV;AAAA,SACrBkB,0BAAwBgB,OAAxB,eAA2ClC,MAA3C,CADqB;AAAA,CAAvB;;AAGAa,IAAIkB,KAAJ,CAAUM,gBAAV,GAA6B,UAACH,OAAD,EAAUlC,MAAV;AAAA,SAC3BkB,0BAAwBgB,OAAxB,qBAAiDlC,MAAjD,CAD2B;AAAA,CAA7B;;AAGAa,IAAIkB,KAAJ,CAAUO,UAAV,GAAuB,UAACJ,OAAD,EAAUlC,MAAV;AAAA,SACrBkB,0BAAwBgB,OAAxB,cAA0ClC,MAA1C,CADqB;AAAA,CAAvB;;AAGAa,IAAIkB,KAAJ,CAAUQ,eAAV,GAA4B,UAACL,OAAD,EAAUM,QAAV,EAAoBxC,MAApB;AAAA,SAC1BkB,0BAAwBgB,OAAxB,gBAA0CM,QAA1C,aAA4DxC,MAA5D,CAD0B;AAAA,CAA5B;;AAGAa,IAAIkB,KAAJ,CAAUU,MAAV,GAAmB,UAACC,IAAD,EAAOC,IAAP,EAAaC,QAAb;AAAA,MAAuBC,WAAvB,uEAAqC,EAArC;AAAA,SACjBxB,uBAAuB,OAAvB;AACEqB,cADF;AAEEC,cAFF;AAGEC;AAHF,KAIMC,WAJN,EADiB;AAAA,CAAnB;;AAQAhC,IAAIkB,KAAJ,CAAUe,MAAV,GAAmB,UAACZ,OAAD;AAAA,SACjBP,6BAA2BO,OAA3B,CADiB;AAAA,CAAnB;;AAGArB,IAAIkC,KAAJ,GAAY,EAAZ;;AAEAlC,IAAIkC,KAAJ,CAAUd,SAAV,GAAsB,UAACe,YAAD,EAAehD,MAAf;AAAA,SACpBkB,0BAAwB8B,YAAxB,EAAwChD,MAAxC,CADoB;AAAA,CAAtB;;AAGAa,IAAIkC,KAAJ,CAAUE,aAAV,GAA0B,UAACD,YAAD,EAAehD,MAAf;AAAA,SACxBkB,0BAAwB8B,YAAxB,kBAAmDhD,MAAnD,CADwB;AAAA,CAA1B;;AAGAa,IAAIkC,KAAJ,CAAUG,aAAV,GAA0B,UAACF,YAAD,EAAed,OAAf,EAAwBlB,KAAxB;AAAA,SACxBK,kCACW2B,YADX,kBAEE,EAAEhC,YAAF,EAFF,EAGE,KAHF,EAIE,EAAEkB,gBAAF,EAJF,CADwB;AAAA,CAA1B;;AAQArB,IAAIsC,MAAJ,GAAa,EAAb;;AAEAtC,IAAIsC,MAAJ,CAAWV,MAAX,GAAoB,UAACC,IAAD,EAAOR,OAAP,EAAgBW,WAAhB;AAAA,SAClBxB;AACEqB,cADF;AAEEU,mBAAelB;AAFjB,KAGMW,WAHN,EADkB;AAAA,CAApB;;AAOAhC,IAAIsC,MAAJ,CAAWE,MAAX,GAAoB,UAACb,QAAD,EAAWc,QAAX;AAAA,SAClBjC,mCAAiCmB,QAAjC,EAA6Cc,QAA7C,EAAuD,KAAvD,CADkB;AAAA,CAApB;;AAGAzC,IAAIsC,MAAJ,CAAWI,aAAX,GAA2B,UAACf,QAAD,EAAWgB,cAAX;AAAA,SACzBnC,mCAAiCmB,QAAjC,EAA6CgB,cAA7C,CADyB;AAAA,CAA3B;;AAGA3C,IAAIsC,MAAJ,CAAWL,MAAX,GAAoB,UAACN,QAAD;AAAA,SAClBb,8BAA4Ba,QAA5B,CADkB;AAAA,CAApB;;AAGA3B,IAAIsC,MAAJ,CAAWlB,SAAX,GAAuB,UAACO,QAAD,EAAWxC,MAAX;AAAA,SACrBkB,2BAAyBsB,QAAzB,EAAqCxC,MAArC,CADqB;AAAA,CAAvB;;AAGAa,IAAIsC,MAAJ,CAAWM,kBAAX,GAAgC,UAACjB,QAAD,EAAWV,MAAX;AAAA,SAC9BT,mCAAiCmB,QAAjC,aAAmD,EAAEV,cAAF,EAAnD,CAD8B;AAAA,CAAhC;;AAGAjB,IAAIsC,MAAJ,CAAWhB,SAAX,GAAuB,UAACK,QAAD,EAAWxC,MAAX;AAAA,SACrBkB,2BAAyBsB,QAAzB,aAA2CxC,MAA3C,CADqB;AAAA,CAAvB;;AAGAa,IAAIsC,MAAJ,CAAWO,QAAX,GAAsB,UAAClB,QAAD,EAAWmB,cAAX;AAAA,SACpBtC,mCAAiCmB,QAAjC,aAAmD,EAAEoB,kBAAkBD,cAApB,EAAnD,CADoB;AAAA,CAAtB;;AAGA9C,IAAIsC,MAAJ,CAAWU,iBAAX,GAA+B,UAACrB,QAAD,EAAWxC,MAAX;AAAA,SAC7BkB,2BAAyBsB,QAAzB,kBAAgDxC,MAAhD,CAD6B;AAAA,CAA/B;;AAGAa,IAAIsC,MAAJ,CAAWW,cAAX,GAA4B,UAACtB,QAAD,EAAWuB,WAAX;AAAA,SAC1BpC,8BAA4Ba,QAA5B,oBAAmDuB,WAAnD,CAD0B;AAAA,CAA5B;;AAGAlD,IAAIsC,MAAJ,CAAWa,WAAX,GAAyB,UAACxB,QAAD,EAAWuB,WAAX,EAAwB/C,KAAxB;AAAA,SACvBK,mCAAiCmB,QAAjC,oBAAwDuB,WAAxD,EAAuE,EAAE/C,YAAF,EAAvE,EAAkF,KAAlF,CADuB;AAAA,CAAzB;;AAGAH,IAAIsC,MAAJ,CAAWc,WAAX,GAAyB,UAACzB,QAAD,EAAWuB,WAAX,EAAwB/D,MAAxB;AAAA,SACvBkB,2BAAyBsB,QAAzB,oBAAgDuB,WAAhD,EAA+D/D,MAA/D,CADuB;AAAA,CAAzB;;AAGAa,IAAIqD,IAAJ,GAAW;AACTC,sDADS;AAETC;AAFS,CAAX;;kBAKevD,G;AAER,IAAMC,kCAAaD,IAAIC,UAAvB;AACA,IAAMG,oCAAcJ,IAAII,WAAxB;AACA,IAAMC,0CAAiBL,IAAIK,cAA3B;AACA,IAAMG,0DAAyBR,IAAIQ,sBAAnC;AACA,IAAMM,gDAAoBd,IAAIc,iBAA9B;;AAEA,IAAMI,wBAAQlB,IAAIkB,KAAlB;AACA,IAAMH,4BAAUf,IAAIe,OAApB;AACA,IAAMmB,wBAAQlC,IAAIkC,KAAlB;AACA,IAAMI,0BAAStC,IAAIsC,MAAnB;AACA,IAAMe,sBAAOrD,IAAIqD,IAAjB","file":"index.js","sourcesContent":["import { getSprintHistory, getSprintWithHistory } from './util/getSprintHistory';\n\nlet endpointUrl = 'http://localhost:3001';\nconst prefix = 'rest/agile/1.0';\n\nconst defaultSettings = {\n  mode: 'cors',\n  cache: 'default',\n};\n\nconst esc = encodeURIComponent;\n\nconst encodeGetQuery = params =>\n  Object.keys(params)\n    .map(k => `${esc(k)}=${esc(params[k])}`)\n    .join('&');\n\nconst url = (uri, query) =>\n  `${endpointUrl}/${prefix}/${uri}?${encodeGetQuery(query)}`;\n\nconst sendRequest = (uri, settings, query = {}) =>\n  fetch(url(uri, query), { ...defaultSettings, ...settings })\n    .then(response => response.json());\n\nconst api = {};\n\napi.setSetting = (key, value) =>\n  defaultSettings[key] = value;\n\napi.setEndpoint = (url) =>\n  endpointUrl = url;\n\napi.sendGetRequest = (resourceUri, query = {}) =>\n  sendRequest(resourceUri, { method: 'GET' }, query);\n\napi.sendRequestWithPayload = (resourceUri, payload, httpMethod = 'POST', query = {}) =>\n  sendRequest(resourceUri, { method: httpMethod, body: JSON.stringify(payload) }, query);\n\napi.sendDeleteRequest = (resourceUri) =>\n  sendRequest(resourceUri, { method: 'DELETE' });\n\napi.backlog = {};\n\n/**\n * @param string[] issues\n *   Array of issue ids, eg ['PR-1'].\n */\napi.backlog.moveIssuesToBacklog = issues =>\n  sendRequestWithPayload('backlog/issue', {issues: issues});\n\napi.board = {};\n\napi.board.getList = (params) =>\n  sendGetRequest('board', params);\n\napi.board.getSingle = (boardId, params) =>\n  sendGetRequest(`board/${boardId}`, params);\n\napi.board.getIssues = (boardId, params) =>\n  sendGetRequest(`board/${boardId}/issues`, params);\n\napi.board.getBacklog = (boardId, params) =>\n  sendGetRequest(`board/${boardId}/backlog`, params);\n\napi.board.getConfiguration = (boardId, params) =>\n  sendGetRequest(`board/${boardId}/configuration`, params);\n\napi.board.getSprints = (boardId, params) =>\n  sendGetRequest(`board/${boardId}/sprint`, params);\n\napi.board.getSprintIssues = (boardId, sprintId, params) =>\n  sendGetRequest(`board/${boardId}/sprint/${sprintId}/issue`, params);\n\napi.board.create = (name, type, filterId, otherValues = {}) =>\n  sendRequestWithPayload('board', {\n    name,\n    type,\n    filterId,\n    ... otherValues\n  });\n\napi.board.delete = (boardId) =>\n  sendDeleteRequest(`board/${boardId}`);\n\napi.issue = {};\n\napi.issue.getSingle = (issueIdOrKey, params) =>\n  sendGetRequest(`issue/${issueIdOrKey}`, params);\n\napi.issue.getEstimation = (issueIdOrKey, params) =>\n  sendGetRequest(`issue/${issueIdOrKey}/estimation`, params);\n\napi.issue.setEstimation = (issueIdOrKey, boardId, value) =>\n  sendRequestWithPayload(\n    `issue/${issueIdOrKey}/estimation`,\n    { value },\n    'PUT',\n    { boardId }\n  );\n\napi.sprint = {};\n\napi.sprint.create = (name, boardId, otherValues) =>\n  sendRequestWithPayload(`sprint`, {\n    name,\n    originBoardId: boardId,\n    ... otherValues\n  });\n\napi.sprint.update = (sprintId, newValue) =>\n  sendRequestWithPayload(`sprint/${sprintId}`, newValue, 'PUT');\n\napi.sprint.partialUpdate = (sprintId, fieldsToUpdate) =>\n  sendRequestWithPayload(`sprint/${sprintId}`, fieldsToUpdate);\n\napi.sprint.delete = (sprintId) =>\n  sendDeleteRequest(`sprint/${sprintId}`);\n\napi.sprint.getSingle = (sprintId, params) =>\n  sendGetRequest(`sprint/${sprintId}`, params);\n\napi.sprint.moveIssuesToSprint = (sprintId, issues) =>\n  sendRequestWithPayload(`sprint/${sprintId}/issue`, { issues });\n\napi.sprint.getIssues = (sprintId, params) =>\n  sendGetRequest(`sprint/${sprintId}/issue`, params);\n\napi.sprint.swapWith = (sprintId, secondSprintId) =>\n  sendRequestWithPayload(`sprint/${sprintId}/issue`, { sprintToSwapWith: secondSprintId });\n\napi.sprint.getPropertiesKeys = (sprintId, params) =>\n  sendGetRequest(`sprint/${sprintId}/properties`, params);\n\napi.sprint.deleteProperty = (sprintId, propertyKey) =>\n  sendDeleteRequest(`sprint/${sprintId}/properties/${propertyKey}`);\n\napi.sprint.setProperty = (sprintId, propertyKey, value) =>\n  sendRequestWithPayload(`sprint/${sprintId}/properties/${propertyKey}`, { value }, 'PUT');\n\napi.sprint.getProperty = (sprintId, propertyKey, params) =>\n  sendGetRequest(`sprint/${sprintId}/properties/${propertyKey}`, params);\n\napi.util = {\n  getSprintHistory,\n  getSprintWithHistory\n};\n\nexport default api;\n\nexport const setSetting = api.setSetting;\nexport const setEndpoint = api.setEndpoint;\nexport const sendGetRequest = api.sendGetRequest;\nexport const sendRequestWithPayload = api.sendRequestWithPayload;\nexport const sendDeleteRequest = api.sendDeleteRequest;\n\nexport const board = api.board;\nexport const backlog = api.backlog;\nexport const issue = api.issue;\nexport const sprint = api.sprint;\nexport const util = api.util;\n"]}